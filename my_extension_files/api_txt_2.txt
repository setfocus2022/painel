   'INSERT INTO cadastro_clientes (name, surname, email, birthDate, gender, phone, phone2, cpf, cnpj, registration, obs, address, number, complement, district, city, state, country, zipCode, unit, sector, role, institution, accessRecovery, api_token) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
  const values = [
    name,
    surname,
    email,
    birthDate,
    gender,
    phone,
    phone2,
    cpf,
    cnpj,
    registration,
    obs,
    address,
    number,
    complement,
    district,
    city,
    state,
    country,
    zipCode,
    unit,
    sector,
    role,
    institution,
    accessRecovery,
    apiToken, // Adicionado aqui
  ];
  // ...
});
```

### Passo 2: Endpoints da API

Depois que o token de API for gerado e armazenado, você pode criar os endpoints da API que irão manipular as solicitações de dados da instituição e carregar usuários. 

Aqui está um exemplo de como você pode fazer isso:

```javascript
app.get('/api/instituicao/:token', (req, res) => {
  const { token } = req.params;
  const query = 'SELECT * FROM cadastro_clientes WHERE api_token = ?';
  db.query(query, [token], (err, results) => {
    if (err) {
      console.log(err);
      return res.send({ success: false, message: err.message });
    }
    res.send({ success: true, instituicao: results[0] });
  });
});

app.post('/api/instituicao/:token/load_users', (req, res) => {
  const { token } = req.params;
  const { users } = req.body; // Assumindo que "users" é uma matriz de objetos de usuário
  // Sua lógica para carregar usuários vai aqui
});
```

Neste exemplo, o primeiro endpoint (`/api/instituicao/:token`) irá retornar os dados da instituição com o token de API fornecido. O segundo endpoint (`/api/instituicao/:token/load_users`) irá lidar com a carga de usuários para a instituição com o token de API fornecido.

Por favor, note que isto é apenas um exemplo e pode necessitar de aj